{"version":3,"sources":["components/Layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["FlexLayout","styled","div","_templateObject","_taggedTemplateLiteral","Wrapper","_ref","theme","colors","primary","ExpandableSectionButton","_ref2","onClick","expanded","t","useTranslation","_jsxs","role","children","_jsx","Text","color","bold","ChevronUpIcon","ChevronDownIcon","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","concat","StyledLinkExternal","LinkExternal","_templateObject2","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","Flex","justifyContent","Skeleton","width","height","href","symbol","CoreTag","props","Tag","_objectSpread","variant","outline","startIcon","VerifiedIcon","mr","CommunityTag","CommunityIcon","DualTag","MultiplierTag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","TokenPairImage","primaryToken","secondaryToken","flexDirection","Heading","split","StyledSpacer","size","Spacer","s","_ref$size","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","l","React","Children","toArray","length","map","child","i","_Fragment","StyledTokenInput","input","_ref$isWarning","isWarning","shadows","warning","inset","_ref3","text","StyledInput","Input","_ref4","mediaQueries","xs","_ref5","sm","StyledErrorMessage","_templateObject3","ModalInput","_ref6","max","onChange","onSelectMax","value","inputTitle","_ref6$decimals","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","Button","scale","Link","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","_ref$tokenName","tokenName","displayApr","lpPrice","apr","cakePrice","_useState","useState","_useState2","_slicedToArray","val","setVal","_useToast","useToast","toastSuccess","toastError","_useState3","_useState4","pendingTx","setPendingTx","_useState5","_useState6","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","Modal","title","mt","IconButton","CalculateIcon","disabled","isFinite","eq","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","t0","console","error","finish","stop","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","handleUnstake","amount","unstakeFarm","_x","apply","arguments","onUnstake","useStakeFarms","handleStake","txHash","stakeFarm","sent","info","onStake","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","fetchFarmUserDataAsync","pids","_callee2","_context2","_x2","stakedBalanceBigNumber","getBalanceAmount","_useModal","useModal","onPresentDeposit","_useModal3","onPresentWithdraw","Balance","getBalanceNumber","unit","prefix","some","item","pathname","includes","MinusIcon","AddIcon","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","tx","receipt","address","ethers","constants","MaxUint256","wait","abrupt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","_ref2$allowance","allowance","allowanceAsString","_ref2$tokenBalance","tokenBalanceAsString","_ref2$stakedBalance","stakedBalanceAsString","_ref2$earnings","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","_useFarmUser","useFarmUser","onPresentApyModal","event","stopPropagation","ml","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","_ref3$hideButton","hideButton","TokenWrapper","Farm","label","rawStakedBalance","paddingRight","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","_useTooltip","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","HelpIcon","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","_callee3","_context3","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","_templateObject4","_templateObject5","background","_templateObject6","StakeContainer","_templateObject7","TagsContainer","_templateObject8","_templateObject9","_ref7","InfoContainer","_templateObject10","ValueContainer","_templateObject11","_ref8","ValueWrapper","_templateObject12","ActionPanel","_ref9","details","bsc","StakedAction","Label","ContentContainer","CellLayout","_ref2$label","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","_useMatchBreakpoints","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","_createElement","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","ButtonMenu","ButtonMenuItem","as","to","NotificationDot","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","CardViewIcon","TABLE","ListViewIcon","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","_useFarms","useFarms","farmsLP","userDataLoaded","query","setQuery","_usePersistState","usePersistState","localStorageKey","_usePersistState2","setViewMode","sortOption","setSortOption","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","_useUserFarmStakedOnl","useUserFarmStakedOnly","_useUserFarmStakedOnl2","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","_useState7","_useState8","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","type","Page","Toggle","checked","Select","options","option","marginLeft","SearchInput","target","sort","a","b","Table","Route","exact","renderContent","Loading","src","alt"],"mappings":"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","file":"static/js/7.d08d9285.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@arborswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 4,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 5,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 6,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 7,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@arborswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport {\n  Tag,\n  VerifiedIcon,\n  CommunityIcon,\n  RefreshIcon,\n  AutoRenewIcon,\n  TagProps,\n  TimerIcon,\n  BlockIcon,\n  VoteIcon,\n} from '@arborswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nconst VoteNowTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" startIcon={<VoteIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Vote Now')}\n    </Tag>\n  )\n}\n\nconst SoonTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"binance\" startIcon={<TimerIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Soon')}\n    </Tag>\n  )\n}\n\nconst ClosedTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textDisabled\" startIcon={<BlockIcon width=\"18px\" color=\"textDisabled\" mr=\"4px\" />} {...props}>\n      {t('Closed')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, DualTag, ManualPoolTag, CompoundingPoolTag, VoteNowTag, SoonTag, ClosedTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading } from '@arborswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@arborswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@arborswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n}) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n          <IconButton variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </AnnualRoiContainer>\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@arborswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@arborswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@arborswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await callWithGasPrice(lpContract, 'approve', [\n        masterChefContract.address,\n        ethers.constants.MaxUint256,\n      ])\n      const receipt = await tx.wait()\n      return receipt.status\n    } catch (e) {\n      return false\n    }\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@arborswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from '@arborswap/uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={lpPrice.toNumber()}\n      earningTokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from '@arborswap/uikit'\nimport { Farm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>{earnLabel}</Text>\n        </Flex>\n        <CardActionsContainer\n          farm={farm}\n          lpLabel={lpLabel}\n          account={account}\n          cakePrice={cakePrice}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@arborswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton\n          variant={hideButton ? 'text' : 'text-and-button'}\n          pid={pid}\n          lpSymbol={lpSymbol}\n          lpLabel={lpLabel}\n          multiplier={multiplier}\n          cakePrice={cakePrice}\n          apr={originalValue}\n          displayApr={value}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@arborswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n  details?: string\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      </TokenWrapper>\n      <div style={{ paddingRight: '10px' }}>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>{' '}\n      <CommunityTag />\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@arborswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@arborswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@arborswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@arborswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from '@arborswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@arborswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceCakeBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@arborswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@arborswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  type: 'core' | 'community'\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'type':\n                return (\n                  <td key={key}>\n                    <CellInner style={{ width: '140px' }}>\n                      {props[key] === 'community' ? <CommunityTag scale=\"sm\" /> : <CoreTag scale=\"sm\" />}\n                      <CommunityTag />\n                      {/* {props?.details?.boosted ? <BoostedTag scale=\"sm\" ml=\"16px\" /> : null} */}\n                    </CellInner>\n                  </td>\n                )\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@arborswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@arborswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@arborswap/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@arborswap/uikit'\nimport { ChainId } from '@arborswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly } from 'state/user/hooks'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'arbor_farm_view' })\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsWithUserData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n          }\n          return farmsCurrentlyVisible\n        })\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [chosenFarmsMemoized, observerIsSet])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      type: farm.isCommunity ? 'community' : 'core',\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={loadMoreRef} />\n        <StyledImage src=\"/images/decorations/spinner.gif\" alt=\"Arborswap Loading\" width={120} height={120} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}